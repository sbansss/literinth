import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î...");

  // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...");
  await prisma.schematicLike.deleteMany();
  await prisma.schematicTag.deleteMany();
  await prisma.tag.deleteMany();
  await prisma.schematic.deleteMany();
  await prisma.subcategory.deleteMany();
  await prisma.category.deleteMany();
  await prisma.session.deleteMany();
  await prisma.user.deleteMany();

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
  const hashedPassword = await bcrypt.hash("password123", 10);

  const user1 = await prisma.user.create({
    data: {
      email: "alexey@literinth.com",
      username: "alexey_kuzmichev",
      password: hashedPassword,
      name: "Alexey Kuzmichev",
      bio: "–°–æ–∑–¥–∞—Ç–µ–ª—å –∫—Ä—É—Ç—ã—Ö —Å—Ö–µ–º–∞—Ç–∏–∫–æ–≤",
    },
  });

  const user2 = await prisma.user.create({
    data: {
      email: "ivan@literinth.com",
      username: "ivan_redstone",
      password: hashedPassword,
      name: "Ivan Petrov",
      bio: "–†–µ–¥—Å—Ç–æ—É–Ω –º–∞—Å—Ç–µ—Ä",
    },
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  console.log("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...");

  const hostileMobs = await prisma.category.create({
    data: {
      name: "–í—Ä–∞–∂–¥–µ–±–Ω—ã–µ –º–æ–±—ã",
      slug: "hostile-mobs",
      description: "–§–µ—Ä–º—ã –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –º–æ–±–æ–≤",
      order: 1,
      subcategories: {
        create: [
          { name: "–ó–æ–º–±–∏", slug: "zombies", order: 1 },
          { name: "–°–∫–µ–ª–µ—Ç—ã", slug: "skeletons", order: 2 },
          { name: "–ö—Ä–∏–ø–µ—Ä—ã", slug: "creepers", order: 3 },
        ],
      },
    },
  });

  const neutralMobs = await prisma.category.create({
    data: {
      name: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –º–æ–±—ã",
      slug: "neutral-mobs",
      description: "–§–µ—Ä–º—ã –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –º–æ–±–æ–≤",
      order: 2,
      subcategories: {
        create: [
          { name: "–ñ–µ–ª–µ–∑–Ω—ã–µ –≥–æ–ª–µ–º—ã", slug: "iron-golems", order: 1 },
          { name: "–ü—á–µ–ª—ã", slug: "bees", order: 2 },
        ],
      },
    },
  });

  const passiveMobs = await prisma.category.create({
    data: {
      name: "–ü–∞—Å—Å–∏–≤–Ω—ã–µ –º–æ–±—ã",
      slug: "passive-mobs",
      description: "–§–µ—Ä–º—ã –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –º–æ–±–æ–≤",
      order: 3,
      subcategories: {
        create: [
          { name: "–ö–æ—Ä–æ–≤—ã", slug: "cows", order: 1 },
          { name: "–ö—É—Ä–∏—Ü—ã", slug: "chickens", order: 2 },
          { name: "–û–≤—Ü—ã", slug: "sheep", order: 3 },
        ],
      },
    },
  });

  const agriculture = await prisma.category.create({
    data: {
      name: "–ê–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä—ã",
      slug: "agriculture",
      description: "–§–µ—Ä–º—ã —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –≥—Ä–∏–±–æ–≤",
      order: 4,
      subcategories: {
        create: [
          { name: "–ü—à–µ–Ω–∏—Ü–∞", slug: "wheat", order: 1 },
          { name: "–ú–æ—Ä–∫–æ–≤—å", slug: "carrots", order: 2 },
          { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", slug: "potatoes", order: 3 },
          { name: "–¢—ã–∫–≤—ã", slug: "pumpkins", order: 4 },
          { name: "–ê—Ä–±—É–∑—ã", slug: "melons", order: 5 },
        ],
      },
    },
  });

  const blocksItems = await prisma.category.create({
    data: {
      name: "–ë–ª–æ–∫–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã",
      slug: "blocks-items",
      description: "–§–µ—Ä–º—ã –±–ª–æ–∫–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
      order: 5,
      subcategories: {
        create: [
          { name: "–ë—É–ª—ã–∂–Ω–∏–∫", slug: "cobblestone", order: 1 },
          { name: "–û–±—Å–∏–¥–∏–∞–Ω", slug: "obsidian", order: 2 },
          { name: "–ë–∞–∑–∞–ª—å—Ç", slug: "basalt", order: 3 },
        ],
      },
    },
  });

  const itemProcessing = await prisma.category.create({
    data: {
      name: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
      slug: "item-processing",
      description: "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
      order: 6,
      subcategories: {
        create: [
          { name: "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", slug: "sorters", order: 1 },
          { name: "–•—Ä–∞–Ω–∏–ª–∏—â–∞", slug: "storage", order: 2 },
          { name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", slug: "transport", order: 3 },
        ],
      },
    },
  });

  const infrastructure = await prisma.category.create({
    data: {
      name: "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
      slug: "infrastructure",
      description: "–î–æ—Ä–æ–≥–∏, –±–∞–∑—ã, –≥–æ—Ä–æ–¥–∞",
      order: 7,
      subcategories: {
        create: [
          { name: "–î–æ—Ä–æ–≥–∏", slug: "roads", order: 1 },
          { name: "–ë–∞–∑—ã", slug: "bases", order: 2 },
          { name: "–ì–æ—Ä–æ–¥–∞", slug: "cities", order: 3 },
        ],
      },
    },
  });

  const shitpost = await prisma.category.create({
    data: {
      name: "–©–∏—Ç–ø–æ—Å—Ç",
      slug: "shitpost",
      description: "–ú–µ–º–Ω—ã–µ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ö–µ–º–∞—Ç–∏–∫–∏",
      order: 8,
      subcategories: {
        create: [
          { name: "–©–∏—Ç–ø–æ—Å—Ç", slug: "shitpost-archive", order: 1 },
          { name: "–ú—É—Å–æ—Ä–∫–∞", slug: "trash", order: 2 },
        ],
      },
    },
  });

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const shitpostArchive = await prisma.subcategory.findFirst({
    where: { slug: "shitpost-archive" },
  });

  const sorters = await prisma.subcategory.findFirst({
    where: { slug: "sorters" },
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤
  console.log("üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤...");
  const tagsPechki = await prisma.tag.create({
    data: { name: "–ü–µ—á–∫–∏", slug: "pechki" },
  });
  const tagsRedstone = await prisma.tag.create({
    data: { name: "–†–µ–¥—Å—Ç–æ—É–Ω", slug: "redstone" },
  });
  const tagsLitematica = await prisma.tag.create({
    data: { name: "–õ–∞–π—Ç–º–∞—Ç–∏–∫–∞", slug: "litematica" },
  });
  const tagsShitpost = await prisma.tag.create({
    data: { name: "–©–∏—Ç–ø–æ—Å—Ç", slug: "shitpost" },
  });
  const tagsFarms = await prisma.tag.create({
    data: { name: "–§–µ—Ä–º—ã", slug: "farms" },
  });
  const tagsEfficient = await prisma.tag.create({
    data: { name: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ", slug: "efficient" },
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º–∞—Ç–∏–∫–æ–≤
  console.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º–∞—Ç–∏–∫–æ–≤...");

  const schematics = [];

  for (let i = 1; i <= 12; i++) {
    const schematic = await prisma.schematic.create({
      data: {
        title: `Furnace inferno ${10000 + i * 1000}`,
        slug: `furnace-inferno-${10000 + i * 1000}`,
        description: "–ú–µ–≥–∞ —Å—É–ø–µ—Ä –∫—Ä—É—Ç–∞—è –ø–µ—á–∫–∞ —Å —Ñ–∞–π–ª–≤–∞–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π",
        content: `# –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ö–µ–º–∞—Ç–∏–∫–∞
        
–≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –ø–µ—á–∫–∏ —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é!

## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–ª–∏–≤–∞
- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω
- –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –†–µ–¥—Å—Ç–æ—É–Ω
- –•–æ–ø–ø–µ—Ä—ã
- –ü–µ—á–∫–∏
- –ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è`,
        authorId: i % 2 === 0 ? user1.id : user2.id,
        categoryId: shitpost.id,
        subcategoryId: shitpostArchive?.id,
        downloads: Math.floor(Math.random() * 1000000),
        views: Math.floor(Math.random() * 5000000),
        published: true,
        tags: {
          create: [
            { tag: { connect: { id: tagsPechki.id } } },
            { tag: { connect: { id: tagsRedstone.id } } },
            { tag: { connect: { id: tagsLitematica.id } } },
            { tag: { connect: { id: tagsShitpost.id } } },
          ],
        },
      },
    });
    schematics.push(schematic);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º–∞—Ç–∏–∫–æ–≤
  await prisma.schematic.create({
    data: {
      title: "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ 64x",
      slug: "item-sorter-64x",
      description: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ 64 —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
      content: "–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ—Å—Ç—Ä–æ–π–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...",
      authorId: user2.id,
      categoryId: itemProcessing.id,
      subcategoryId: sorters?.id,
      downloads: 450000,
      views: 1200000,
      published: true,
      tags: {
        create: [
          { tag: { connect: { id: tagsRedstone.id } } },
          { tag: { connect: { id: tagsEfficient.id } } },
        ],
      },
    },
  });

  await prisma.schematic.create({
    data: {
      title: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–µ—Ä–º–∞ —Ç—ã–∫–≤",
      slug: "auto-pumpkin-farm",
      description: "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–µ—Ä–º–∞ —Ç—ã–∫–≤ —Å –æ–±—Å–µ—Ä–≤–µ—Ä–æ–º",
      content: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ—Å—Ç—Ä–æ–π–∫–µ —Ñ–µ—Ä–º—ã...",
      authorId: user1.id,
      categoryId: agriculture.id,
      downloads: 780000,
      views: 2100000,
      published: true,
      tags: {
        create: [
          { tag: { connect: { id: tagsFarms.id } } },
          { tag: { connect: { id: tagsEfficient.id } } },
        ],
      },
    },
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–π–∫–æ–≤
  console.log("‚ù§Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–π–∫–æ–≤...");
  for (const schematic of schematics.slice(0, 6)) {
    await prisma.schematicLike.create({
      data: {
        userId: user1.id,
        schematicId: schematic.id,
      },
    });
  }

  console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!");
  console.log(`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 2
- –ö–∞—Ç–µ–≥–æ—Ä–∏–π: 8
- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${await prisma.subcategory.count()}
- –°—Ö–µ–º–∞—Ç–∏–∫–æ–≤: ${await prisma.schematic.count()}
- –¢–µ–≥–æ–≤: ${await prisma.tag.count()}
- –õ–∞–π–∫–æ–≤: ${await prisma.schematicLike.count()}

üîê –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
Email: alexey@literinth.com
Password: password123

Email: ivan@literinth.com
Password: password123
  `);
}

main()
  .catch((e) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
