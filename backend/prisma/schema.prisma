generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Locale {
  RU
  EN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?   @unique
  password  String
  name      String?
  avatar    String?
  bio       String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schematics Schematic[]
  likes      SchematicLike[]
  sessions   Session[]
  accounts   Account[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Категории теперь с i18n
model Category {
  id            String   @id @default(cuid())
  slug          String   @unique
  icon          String?
  order         Int      @default(0)
  visibleRu     Boolean  @default(true)
  visibleEn     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  translations  CategoryTranslation[]
  subcategories Subcategory[]
  schematics    Schematic[]

  @@map("categories")
}

model CategoryTranslation {
  id          String   @id @default(cuid())
  categoryId  String
  locale      Locale
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
  @@map("category_translations")
}

model Subcategory {
  id         String   @id @default(cuid())
  categoryId String
  slug       String
  order      Int      @default(0)
  visibleRu  Boolean  @default(true)
  visibleEn  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category     Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  translations SubcategoryTranslation[]
  schematics   Schematic[]

  @@unique([categoryId, slug])
  @@map("subcategories")
}

model SubcategoryTranslation {
  id            String   @id @default(cuid())
  subcategoryId String
  locale        Locale
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@unique([subcategoryId, locale])
  @@map("subcategory_translations")
}

model Schematic {
  id            String   @id @default(cuid())
  slug          String   @unique
  imageUrl      String?
  fileUrl       String?
  authorId      String
  categoryId    String
  subcategoryId String?
  downloads     Int      @default(0)
  views         Int      @default(0)
  published     Boolean  @default(true)
  visibleRu     Boolean  @default(true)
  visibleEn     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  author       User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category     Category               @relation(fields: [categoryId], references: [id])
  subcategory  Subcategory?           @relation(fields: [subcategoryId], references: [id])
  translations SchematicTranslation[]
  tags         SchematicTag[]
  likes        SchematicLike[]

  @@map("schematics")
}

model SchematicTranslation {
  id          String   @id @default(cuid())
  schematicId String
  locale      Locale
  title       String
  description String
  content     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  schematic Schematic @relation(fields: [schematicId], references: [id], onDelete: Cascade)

  @@unique([schematicId, locale])
  @@map("schematic_translations")
}

model Tag {
  id        String   @id @default(cuid())
  slug      String   @unique
  createdAt DateTime @default(now())

  translations TagTranslation[]
  schematics   SchematicTag[]

  @@map("tags")
}

model TagTranslation {
  id        String   @id @default(cuid())
  tagId     String
  locale    Locale
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, locale])
  @@map("tag_translations")
}

model SchematicTag {
  schematicId String
  tagId       String
  createdAt   DateTime @default(now())

  schematic Schematic @relation(fields: [schematicId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([schematicId, tagId])
  @@map("schematic_tags")
}

model SchematicLike {
  id          String   @id @default(cuid())
  userId      String
  schematicId String
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  schematic Schematic @relation(fields: [schematicId], references: [id], onDelete: Cascade)

  @@unique([userId, schematicId])
  @@map("schematic_likes")
}
